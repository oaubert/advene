diff --git a/pango/pangocoretext-fontmap.c b/pango/pangocoretext-fontmap.c
index 7eb00113..983e6fcb 100644
--- a/pango/pangocoretext-fontmap.c
+++ b/pango/pangocoretext-fontmap.c
@@ -1538,6 +1538,15 @@ pango_core_text_font_map_init (PangoCoreTextFontMap *ctfontmap)
     g_hash_table_insert (ctfontmap->families,
                          g_utf8_casefold (family->family_name, -1), family);
   }
+  /* Insert .AppleSystemUIFont because it isn't included in the result
+   * set from CTFontCollectionCreateFromAvailableFonts. If it's not
+   * included in the families fontset it can't be used to render text.
+   */
+  family = g_object_new (PANGO_TYPE_CORE_TEXT_FAMILY, NULL);
+  family->family_name = g_strdup (".AppleSystemUIFont");
+    g_hash_table_insert (ctfontmap->families,
+                         g_utf8_casefold (family->family_name, -1), family);
+
 }
 
 static PangoFontFace *
--- a/pango/pangocoretext.c
+++ b/pango/pangocoretext.c
@@ -82,6 +82,7 @@ ct_font_descriptor_get_coverage (CTFontDescriptorRef desc)
   const UInt8 *ptr, *plane_ptr;
   const UInt32 plane_size = 8192;
   PangoCoverage *coverage;
+  CFStringRef font_name;
 
   coverage = pango_coverage_new ();
 
@@ -89,6 +90,13 @@ ct_font_descriptor_get_coverage (CTFontDescriptorRef desc)
   if (!charset)
     /* Return an empty coverage */
     return coverage;
+  /* .AppleSymbols Fallback's CTFontDescriptor has a host of members
+   * but the font appears to have no glyphs so return an empty
+   * coverage.
+   */
+  font_name = (CFStringRef)CTFontDescriptorCopyAttribute(desc, kCTFontNameAttribute);
+  if (CFStringCompare(font_name, CFSTR(".AppleSymbolsFB"), 0) == kCFCompareEqualTo)
+    return coverage;
 
   bitmap = CFCharacterSetCreateBitmapRepresentation (kCFAllocatorDefault,
                                                      charset);
